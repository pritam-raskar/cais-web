package com.dair.cais.access.RoleBasedPermission;

import com.dair.cais.access.PolicyAlertMapping.PolicyAlertTypeActionMappingEntity;
import com.dair.cais.access.PolicyAlertMapping.PolicyAlertTypeActionMappingRepository;
import com.dair.cais.access.PolicyModuleMapping.PolicyModuleMappingEntity;
import com.dair.cais.access.PolicyModuleMapping.PolicyModuleMappingRepository;
import com.dair.cais.access.Role.RoleEntity;
import com.dair.cais.access.Role.RoleRepository;
import com.dair.cais.access.RolePolicyMapping.RolesPolicyMappingEntity;
import com.dair.cais.access.RolePolicyMapping.RolesPolicyMappingRepository;
import com.dair.cais.access.organizationUnit.OrgUnitEntity;
import com.dair.cais.access.policy.PolicyEntity;
import com.dair.cais.access.user.UserEntity;
import com.dair.cais.access.user.UserRepository;
import com.dair.cais.access.userOrgRole.UserOrgRoleMappingEntity;
import com.dair.cais.access.userOrgRole.UserOrgRoleMappingRepository;
import com.dair.cais.common.config.CaisAlertConstants;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Update;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class RolePolicyDocumentService {

    @Autowired
    private RoleRepository roleRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private RolesPolicyMappingRepository rolesPolicyMappingRepository;

    @Autowired
    private PolicyAlertTypeActionMappingRepository policyAlertTypeActionMappingRepository;

    @Autowired
    private PolicyModuleMappingRepository policyModuleMappingRepository;

    @Autowired
    private UserOrgRoleMappingRepository userOrgRoleMappingRepository;

    @Autowired
    private MongoTemplate mongoTemplate;

    @Autowired
    private ObjectMapper objectMapper;

    @Transactional
    public RolePolicyDocument generateAndSaveDocumentForRoleId(Integer roleId) {
        RolePolicyDocument document = generateDocumentForRoleId(roleId);
        saveRolePolicyDocument(document);
        saveRoleDataInVariousFormats(roleId, document);
        return document;
    }

    @Transactional
    public List<RolePolicyDocument> generateAndSaveDocumentsForRoleIds(List<Integer> roleIds) {
        return roleIds.stream()
                .map(this::generateAndSaveDocumentForRoleId)
                .collect(Collectors.toList());
    }

    public RolePolicyDocument getDocumentForRoleId(Integer roleId) {
        Query query = new Query(Criteria.where("rolePolicyDocument.role").is(roleId.toString()));
        RoleBasedPermissionDocument document = mongoTemplate.findOne(query, RoleBasedPermissionDocument.class);
        return document != null ? document.getRolePolicyDocument() : null;
    }

    private RolePolicyDocument generateDocumentForRoleId(Integer roleId) {
        RoleEntity role = roleRepository.findById(roleId)
                .orElseThrow(() -> new RuntimeException("Role not found with ID: " + roleId));
        return generateDocumentForRole(role);
    }

    private RolePolicyDocument generateDocumentForRole(RoleEntity role) {
        List<RolesPolicyMappingEntity> mappings = rolesPolicyMappingRepository.findByRoleRoleId(role.getRoleId());

        RolePolicyDocument document = new RolePolicyDocument();
        document.setRole(role.getRoleName());

        List<RolePolicyDocument.Permission> permissions = new ArrayList<>();
        Set<String> uniqueActions = new HashSet<>();
        Set<String> uniqueAlertTypes = new HashSet<>();
        Set<String> uniqueModules = new HashSet<>();

        for (RolesPolicyMappingEntity mapping : mappings) {
            PolicyEntity policy = mapping.getPolicy();
            List<PolicyAlertTypeActionMappingEntity> alertMappings = policyAlertTypeActionMappingRepository.findByPolicyPolicyId(policy.getPolicyId());
            List<PolicyModuleMappingEntity> moduleMappings = policyModuleMappingRepository.findByPolicyPolicyId(policy.getPolicyId());

            for (PolicyAlertTypeActionMappingEntity alertMapping : alertMappings) {
                for (PolicyModuleMappingEntity moduleMapping : moduleMappings) {
                    RolePolicyDocument.Permission permission = new RolePolicyDocument.Permission();
                    permission.setPolicyId(policy.getPolicyId());

                    String action = alertMapping.getAction().getActionId() + ":" + alertMapping.getAction().getActionName();
                    permission.setActions(Collections.singletonList(action));
                    permission.setAlertTypes(Collections.singletonList(alertMapping.getAlertType().getAlertTypeId()));
                    permission.setModules(Collections.singletonList(moduleMapping.getModule().getModuleName()));
                    permission.setCondition(alertMapping.getCondition() != null ? alertMapping.getCondition() : "N/A");

                    permissions.add(permission);

                    uniqueActions.add(action);
                    uniqueAlertTypes.add(alertMapping.getAlertType().getAlertTypeId());
                    uniqueModules.add(moduleMapping.getModule().getModuleName());
                }
            }
        }

        document.setPermissions(permissions);

        RolePolicyDocument.Metadata metadata = new RolePolicyDocument.Metadata();
        metadata.setTotalPolicies(permissions.size());
        metadata.setUniqueActions(uniqueActions);
        metadata.setUniqueAlertTypes(uniqueAlertTypes);
        metadata.setUniqueModules(uniqueModules);

        document.setMetadata(metadata);

        return document;
    }

    public List<Map<String, String>> generateTabularDataForRole(Integer roleId) {
        RoleEntity role = roleRepository.findById(roleId)
                .orElseThrow(() -> new RuntimeException("Role not found with ID: " + roleId));

        List<RolesPolicyMappingEntity> mappings = rolesPolicyMappingRepository.findByRoleRoleId(roleId);
        List<Map<String, String>> rows = new ArrayList<>();

        for (RolesPolicyMappingEntity mapping : mappings) {
            PolicyEntity policy = mapping.getPolicy();
            List<PolicyAlertTypeActionMappingEntity> alertMappings = policyAlertTypeActionMappingRepository.findByPolicyPolicyId(policy.getPolicyId());
            List<PolicyModuleMappingEntity> moduleMappings = policyModuleMappingRepository.findByPolicyPolicyId(policy.getPolicyId());

            for (PolicyAlertTypeActionMappingEntity alertMapping : alertMappings) {

                    Map<String, String> row = new HashMap<>();
                    row.put("Role", role.getRoleName());
                    row.put("PolicyId", policy.getPolicyId().toString());
                    row.put("Action", alertMapping.getAction().getActionId() + ":" + alertMapping.getAction().getActionName());
                    row.put("AlertType", alertMapping.getAlertType().getAlertTypeId());
                    row.put("Condition", alertMapping.getCondition() != null ? alertMapping.getCondition() : "N/A");
                    rows.add(row);
            }

            for (PolicyModuleMappingEntity moduleMapping : moduleMappings) {
                Map<String, String> row = new HashMap<>();
                row.put("Role", role.getRoleName());
                row.put("PolicyId", policy.getPolicyId().toString());
                row.put("Module", moduleMapping.getModule().getModuleName());
                row.put("Action" , moduleMapping.getAction().getActionName());
                row.put("Condition" , moduleMapping.getCondition()!= null ? moduleMapping.getCondition() : "N/A");
                rows.add(row);
            }
        }

        return rows;
    }

    @Transactional(readOnly = true)
    public List<Map<String, String>> generateTabularDataForUser(String userId) {
        UserEntity user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found with ID: " + userId));

        List<UserOrgRoleMappingEntity> userOrgRoleMappings = userOrgRoleMappingRepository.findByUserUserId(userId);
        List<Map<String, String>> rows = new ArrayList<>();

        for (UserOrgRoleMappingEntity uorm : userOrgRoleMappings) {
            RoleEntity role = uorm.getRole();
            OrgUnitEntity orgUnit = uorm.getOrgUnit();

            List<RolesPolicyMappingEntity> rolePolicyMappings = rolesPolicyMappingRepository.findByRoleRoleId(role.getRoleId());

            for (RolesPolicyMappingEntity rpm : rolePolicyMappings) {
                PolicyEntity policy = rpm.getPolicy();
                List<PolicyAlertTypeActionMappingEntity> policyAlertTypeMappings = policyAlertTypeActionMappingRepository.findByPolicyPolicyId(policy.getPolicyId());
                List<PolicyModuleMappingEntity> policyModuleMapping = policyModuleMappingRepository.findByPolicyPolicyId(policy.getPolicyId());

                for (PolicyAlertTypeActionMappingEntity patm : policyAlertTypeMappings) {
                    Map<String, String> row = new HashMap<>();
                    row.put("UserId", user.getUserId());
                    row.put("UserName", user.getUserFirstName() + " " + user.getUserLastName());
                    row.put("OrgUnitId", orgUnit.getOrgId().toString());
                    row.put("OrgUnit", orgUnit.getName());
                    row.put("Role", role.getRoleName());
                    row.put("PolicyId", policy.getPolicyId().toString());
                    row.put("Action", patm.getAction().getActionId() + ":" + patm.getAction().getActionName());
                    row.put("AlertType", patm.getAlertType().getAlertTypeId());
                    row.put("Condition", patm.getCondition() != null ? patm.getCondition() : "N/A");
                    rows.add(row);
                }

                for (PolicyModuleMappingEntity pmam : policyModuleMapping) {
                    Map<String, String> row = new HashMap<>();
                    row.put("UserId", user.getUserId());
                    row.put("UserName", user.getUserFirstName() + " " + user.getUserLastName());
                    row.put("OrgUnitId", orgUnit.getOrgId().toString());
                    row.put("OrgUnit", orgUnit.getName());
                    row.put("Role", role.getRoleName());
                    row.put("PolicyId", policy.getPolicyId().toString());
                    row.put("Action", pmam.getAction().getActionId() + ":" + pmam.getAction().getActionName());
                    row.put("Condition", pmam.getCondition() != null ? pmam.getCondition() : "N/A");
                    rows.add(row);
                }
            }
        }

        return rows;
    }

    // New Methods for Role-Based Data

    /**
     * Saves role-based data in CSV, YAML, and tabular formats.
     *
     * @param roleId  The ID of the role.
     * @param document The RolePolicyDocument object.
     */
    @Transactional
    private void saveRoleDataInVariousFormats(Integer roleId, RolePolicyDocument document) {
        // Generate Tabular Data
        List<Map<String, String>> tabularData = generateTabularDataForRole(roleId);

        // Convert to CSV and YAML
        String csvData = convertToCsv(tabularData);
        String yamlData;
        try {
            yamlData = convertToYaml(tabularData);
        } catch (Exception e) {
            throw new RuntimeException("Error converting data to YAML", e);
        }

        // Save to MongoDB Collections
        saveRoleTabularDataToMongo(roleId, tabularData);
        saveRoleCsvToMongo(roleId, csvData);
        saveRoleYamlToMongo(roleId, yamlData);
    }

    /**
     * Saves tabular data for a role to MongoDB.
     *
     * @param roleId The ID of the role.
     * @param data   The tabular data to save.
     */
    public void saveRoleTabularDataToMongo(Integer roleId, List<Map<String, String>> data) {
        saveToMongo(String.valueOf(roleId), data, CaisAlertConstants.ROLE_PERMISSION_COLLECTION_TABULAR);
    }

    /**
     * Saves CSV data for a role to MongoDB.
     *
     * @param roleId  The ID of the role.
     * @param csvData The CSV data to save.
     */
    public void saveRoleCsvToMongo(Integer roleId, String csvData) {
        Map<String, Object> document = new HashMap<>();
        document.put("roleId", roleId.toString());
        document.put("csvData", csvData);
        document.put("updatedAt", LocalDateTime.now());

        Query query = new Query(Criteria.where("roleId").is(roleId.toString()));
        Update update = Update.fromDocument(new org.bson.Document(document));
        mongoTemplate.upsert(query, update, CaisAlertConstants.ROLE_PERMISSION_COLLECTION_CSV);
    }

    /**
     * Saves YAML data for a role to MongoDB.
     *
     * @param roleId  The ID of the role.
     * @param yamlData The YAML data to save.
     */
    public void saveRoleYamlToMongo(Integer roleId, String yamlData) {
        Map<String, Object> document = new HashMap<>();
        document.put("roleId", roleId.toString());
        document.put("yamlData", yamlData);
        document.put("updatedAt", LocalDateTime.now());

        Query query = new Query(Criteria.where("roleId").is(roleId.toString()));
        Update update = Update.fromDocument(new org.bson.Document(document));
        mongoTemplate.upsert(query, update, CaisAlertConstants.ROLE_PERMISSION_COLLECTION_YAML);
    }

    /**
     * Saves role-based tabular data to MongoDB.

     */


    public void saveUserTabularDataToMongo(String userId, List<Map<String, String>> data) {
        saveToMongo(userId, data, CaisAlertConstants.USER_PERMISSION_TABULAR);
    }

    /**
     * Saves role-based CSV data to MongoDB.

     */
    public void saveUserCsvToMongo(String userId, String csvData) {
        Map<String, Object> document = new HashMap<>();
        document.put("userId", userId);
        document.put("csvData", csvData);
        document.put("updatedAt", LocalDateTime.now());

        Query query = new Query(Criteria.where("userId").is(userId));
        Update update = Update.fromDocument(new org.bson.Document(document));
        mongoTemplate.upsert(query, update, CaisAlertConstants.USER_PERMISSION_CSV);
    }

    public void saveUserYamlToMongo(String userId, String yamlData) {
        Map<String, Object> document = new HashMap<>();
        document.put("userId", userId);
        document.put("yamlData", yamlData);
        document.put("updatedAt", LocalDateTime.now());

        Query query = new Query(Criteria.where("userId").is(userId));
        Update update = Update.fromDocument(new org.bson.Document(document));
        mongoTemplate.upsert(query, update, CaisAlertConstants.USER_PERMISSION_YAML);
    }

    private void saveToMongo(String roleId, List<Map<String, String>> data, String collectionName) {
        Map<String, Object> document = new HashMap<>();
        document.put("roleId", roleId);
        document.put("permissions", data);
        document.put("updatedAt", LocalDateTime.now());

        Query query = new Query(Criteria.where("roleId").is(roleId));
        Update update = Update.fromDocument(new org.bson.Document(document));
        mongoTemplate.upsert(query, update, collectionName);
    }



    /**
     * Converts a list of maps to CSV format.
     *
     * @param data The data to convert.
     * @return The CSV string.
     */
    public String convertToCsv(List<Map<String, String>> data) {
        if (data.isEmpty()) {
            return "";
        }

        List<String> headers = new ArrayList<>(data.get(0).keySet());
        StringBuilder csv = new StringBuilder();

        // Add headers
        csv.append(String.join(",", headers)).append("\n");

        // Add data
        for (Map<String, String> row : data) {
            csv.append(headers.stream()
                            .map(header -> row.getOrDefault(header, ""))
                            .map(this::escapeSpecialCharacters)
                            .collect(Collectors.joining(",")))
                    .append("\n");
        }

        return csv.toString();
    }

    /**
     * Escapes special characters in CSV fields.
     *
     * @param data The data to escape.
     * @return The escaped data.
     */
    private String escapeSpecialCharacters(String data) {
        String escapedData = data.replaceAll("\\R", " ");
        if (data.contains(",") || data.contains("\"") || data.contains("'")) {
            data = data.replace("\"", "\"\"");
            escapedData = "\"" + data + "\"";
        }
        return escapedData;
    }

    /**
     * Converts a list of maps to YAML format.
     *
     * @param data The data to convert.
     * @return The YAML string.
     * @throws Exception If conversion fails.
     */
    public String convertToYaml(List<Map<String, String>> data) throws Exception {
        ObjectMapper yamlMapper = new ObjectMapper(new YAMLFactory());
        return yamlMapper.writeValueAsString(data);
    }

    /**
     * Saves the RolePolicyDocument to MongoDB.
     *
     * @param document The RolePolicyDocument to save.
     */
    private void saveRolePolicyDocument(RolePolicyDocument document) {
        RoleBasedPermissionDocument mongoDocument = new RoleBasedPermissionDocument();
        mongoDocument.setRolePolicyDocument(document);
        mongoTemplate.save(mongoDocument);
    }

}

