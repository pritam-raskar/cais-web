package com.dair.cais.alerts.service;

import com.dair.cais.alert.Alert;
import com.dair.cais.alert.AlertRepository;
import com.dair.cais.alert.AlertService;
import com.dair.cais.alert.AlertEntity;
import com.dair.cais.alert.dto.BulkStepChangeRequest;
import com.dair.cais.alert.dto.BulkStepChangeResponse;
import com.dair.cais.alert.dto.StepTransitionDTO;
import com.dair.cais.alert.exception.AlertOperationException;
import com.dair.cais.alert.exception.AlertValidationException;
import com.dair.cais.alerts.AlertTestDataFactory;
import com.dair.cais.audit.AuditLogRequest;
import com.dair.cais.audit.AuditTrailService;
import jakarta.persistence.EntityNotFoundException;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

/**
 * Unit tests for AlertService using Mockito
 * Following the established pattern from case module testing
 */
@ExtendWith(MockitoExtension.class)
@DisplayName("Alert Service Unit Tests")
class AlertServiceTest {

    @Mock
    private AlertRepository alertRepository;

    @Mock
    private AuditTrailService auditTrailService;

    @InjectMocks
    private AlertService alertService;

    @Test
    @DisplayName("Should retrieve alert by ID successfully")
    void getAlert_ValidId_ReturnsAlert() {
        // Given
        String alertId = "TEST_ALERT_123";
        Alert mockAlert = AlertTestDataFactory.createTestAlert();
        mockAlert.setAlertId(alertId);

        when(alertRepository.findByAlertId(alertId)).thenReturn(AlertTestDataFactory.createTestAlertEntity());

        // When
        Alert result = alertService.getAlertOnId(alertId);

        // Then
        assertThat(result).isNotNull();
        assertThat(result.getAlertId()).isEqualTo(alertId);
        verify(alertRepository).findByAlertId(alertId);
    }

    @Test
    @DisplayName("Should throw EntityNotFoundException when alert not found")
    void getAlert_InvalidId_ThrowsEntityNotFoundException() {
        // Given
        String alertId = "NON_EXISTENT_ALERT";
        when(alertRepository.findByAlertId(alertId)).thenReturn(null);

        // When & Then
        assertThatThrownBy(() -> alertService.getAlertOnId(alertId))
                .isInstanceOf(EntityNotFoundException.class)
                .hasMessageContaining("Alert not found");

        verify(alertRepository).findByAlertId(alertId);
    }

    @Test
    @DisplayName("Should create alert successfully")
    void createAlert_ValidData_CreatesAlert() {
        // Given
        Alert inputAlert = AlertTestDataFactory.createTestAlert();
        AlertEntity mockEntity = AlertTestDataFactory.createTestAlertEntity();

        when(alertRepository.createUpsertAlert(any(AlertEntity.class))).thenReturn(mockEntity);

        // When
        Alert result = alertService.createAlert(inputAlert);

        // Then
        assertThat(result).isNotNull();
        assertThat(result.getAlertId()).isEqualTo(inputAlert.getAlertId());
        verify(alertRepository).createUpsertAlert(any(AlertEntity.class));
    }

    @Test
    @DisplayName("Should handle alert validation errors during creation")
    void createAlert_InvalidData_ThrowsValidationException() {
        // Given
        Alert invalidAlert = new Alert();
        // Missing required fields will cause validation failure

        // When & Then
        assertThatThrownBy(() -> alertService.createAlert(invalidAlert))
                .isInstanceOf(AlertValidationException.class)
                .hasMessageContaining("Alert validation failed");

        verify(alertRepository, never()).createUpsertAlert(any(AlertEntity.class));
    }

    @Test
    @DisplayName("Should update alert step successfully")
    void changeStep_ValidData_UpdatesStep() {
        // Given
        String alertId = "TEST_ALERT_123";
        Long newStepId = 71L;
        String userId = "TEST_USER";
        
        Alert mockAlert = AlertTestDataFactory.createTestAlert();
        mockAlert.setAlertId(alertId);
        AlertEntity mockEntity = AlertTestDataFactory.createTestAlertEntity();

        when(alertRepository.findAlertEntityByAlertId(alertId)).thenReturn(Optional.of(mockEntity));
        when(alertRepository.createUpsertAlert(any(AlertEntity.class))).thenReturn(mockEntity);

        // When
        Alert result = alertService.changeStep(alertId, newStepId, userId);

        // Then
        assertThat(result).isNotNull();
        verify(alertRepository).findByAlertId(alertId);
        verify(alertRepository).createUpsertAlert(any(AlertEntity.class));
    }

    @Test
    @DisplayName("Should handle step change for non-existent alert")
    void changeStep_AlertNotFound_ThrowsEntityNotFoundException() {
        // Given
        String alertId = "NON_EXISTENT_ALERT";
        Long stepId = 71L;
        String userId = "TEST_USER";

        when(alertRepository.findByAlertId(alertId)).thenReturn(null);

        // When & Then
        assertThatThrownBy(() -> alertService.changeStep(alertId, stepId, userId))
                .isInstanceOf(EntityNotFoundException.class);

        verify(alertRepository).findByAlertId(alertId);
        verify(alertRepository, never()).createUpsertAlert(any(AlertEntity.class));
    }

    @Test
    @DisplayName("Should perform bulk step change successfully")
    void changeStepBulk_ValidRequest_UpdatesAllAlerts() {
        // Given
        List<String> alertIds = Arrays.asList("ALERT_1", "ALERT_2", "ALERT_3");
        Long stepId = 71L;
        BulkStepChangeRequest request = AlertTestDataFactory.createBulkAlertStepChangeRequest(alertIds, stepId);

        Alert mockAlert = AlertTestDataFactory.createTestAlert();
        AlertEntity mockEntity = AlertTestDataFactory.createTestAlertEntity();

        when(alertRepository.findByAlertId(anyString())).thenReturn(mockEntity);
        when(alertRepository.createUpsertAlert(any(AlertEntity.class))).thenReturn(mockEntity);

        // When
        BulkStepChangeResponse response = alertService.changeStepBulk(request);

        // Then
        assertThat(response).isNotNull();
        assertThat(response.getSuccessCount()).isEqualTo(3);
        assertThat(response.getFailureCount()).isEqualTo(0);
        verify(alertRepository, times(3)).findByAlertId(anyString());
        verify(alertRepository, times(3)).createUpsertAlert(any(AlertEntity.class));
    }

    @Test
    @DisplayName("Should handle bulk step change with some failures")
    void changeStepBulk_PartialFailures_ReturnsPartialSuccess() {
        // Given
        List<String> alertIds = Arrays.asList("ALERT_1", "ALERT_2", "NON_EXISTENT");
        Long stepId = 71L;
        BulkStepChangeRequest request = AlertTestDataFactory.createBulkAlertStepChangeRequest(alertIds, stepId);

        AlertEntity mockEntity = AlertTestDataFactory.createTestAlertEntity();

        when(alertRepository.findByAlertId("ALERT_1")).thenReturn(mockEntity);
        when(alertRepository.findByAlertId("ALERT_2")).thenReturn(mockEntity);
        when(alertRepository.findByAlertId("NON_EXISTENT")).thenReturn(null);
        when(alertRepository.createUpsertAlert(any(AlertEntity.class))).thenReturn(mockEntity);

        // When
        BulkStepChangeResponse response = alertService.changeStepBulk(request);

        // Then
        assertThat(response).isNotNull();
        assertThat(response.getSuccessCount()).isEqualTo(2);
        assertThat(response.getFailureCount()).isEqualTo(1);
        assertThat(response.getFailures()).hasSize(1);
        verify(alertRepository, times(3)).findByAlertId(anyString());
        verify(alertRepository, times(2)).createUpsertAlert(any(AlertEntity.class));
    }

    @Test
    @DisplayName("Should update alert total score successfully")
    void updateTotalScore_ValidData_UpdatesScore() {
        // Given
        String alertId = "TEST_ALERT_123";
        int newScore = 95;
        
        AlertEntity mockEntity = AlertTestDataFactory.createTestAlertEntity();
        when(alertRepository.findAlertEntityByAlertId(alertId)).thenReturn(Optional.of(mockEntity));
        when(alertRepository.createUpsertAlert(any(AlertEntity.class))).thenReturn(mockEntity);

        // When
        Alert result = alertService.updateTotalScore(alertId, newScore);

        // Then
        assertThat(result).isNotNull();
        verify(alertRepository).findByAlertId(alertId);
        verify(alertRepository).createUpsertAlert(any(AlertEntity.class));
    }

    @Test
    @DisplayName("Should update alert owner successfully")
    void updateOwnerId_ValidData_UpdatesOwner() {
        // Given
        String alertId = "TEST_ALERT_123";
        String newOwnerId = "NEW_OWNER";
        
        AlertEntity mockEntity = AlertTestDataFactory.createTestAlertEntity();
        when(alertRepository.findAlertEntityByAlertId(alertId)).thenReturn(Optional.of(mockEntity));
        when(alertRepository.createUpsertAlert(any(AlertEntity.class))).thenReturn(mockEntity);

        // When
        Alert result = alertService.updateOwnerId(alertId, newOwnerId);

        // Then
        assertThat(result).isNotNull();
        verify(alertRepository).findByAlertId(alertId);
        verify(alertRepository).createUpsertAlert(any(AlertEntity.class));
    }

    @Test
    @DisplayName("Should delete alert successfully")
    void deleteAlert_ValidId_DeletesAlert() {
        // Given
        String alertId = "TEST_ALERT_123";
        String alertType = "account-review";
        
        AlertEntity mockEntity = AlertTestDataFactory.createTestAlertEntity();
        when(alertRepository.findAlertEntityByAlertId(alertId)).thenReturn(Optional.of(mockEntity));

        // When
        alertService.deleteAlertById(alertId, alertType);

        // Then
        verify(alertRepository).findByAlertId(alertId);
        verify(alertRepository).deleteById(alertId);
    }

    @Test
    @DisplayName("Should handle delete for non-existent alert")
    void deleteAlert_AlertNotFound_ThrowsEntityNotFoundException() {
        // Given
        String alertId = "NON_EXISTENT_ALERT";
        String alertType = "account-review";
        
        when(alertRepository.findByAlertId(alertId)).thenReturn(null);

        // When & Then
        assertThatThrownBy(() -> alertService.deleteAlertById(alertId, alertType))
                .isInstanceOf(EntityNotFoundException.class);

        verify(alertRepository).findByAlertId(alertId);
        verify(alertRepository, never()).deleteById(alertId);
    }

    @Test
    @DisplayName("Should create alert with audit logging")
    void createAlert_WithAudit_CreatesAlertAndLogsAudit() {
        // Given
        Alert inputAlert = AlertTestDataFactory.createTestAlert();
        AuditLogRequest auditRequest = AlertTestDataFactory.createAuditLogRequest();
        AlertEntity mockEntity = AlertTestDataFactory.createTestAlertEntity();

        when(alertRepository.createUpsertAlert(any(AlertEntity.class))).thenReturn(mockEntity);
        doNothing().when(auditTrailService).logAction(anyLong(), anyString(), anyInt(), anyString(), 
                anyString(), anyString(), anyString(), anyString(), anyString());

        // When
        Alert result = alertService.createAlertWithAudit(inputAlert, auditRequest);

        // Then
        assertThat(result).isNotNull();
        verify(alertRepository).createUpsertAlert(any(AlertEntity.class));
        verify(auditTrailService).logAction(anyLong(), anyString(), anyInt(), anyString(), 
                anyString(), anyString(), anyString(), anyString(), anyString());
    }

    @Test
    @DisplayName("Should get alert step transitions successfully")
    void getAlertStepTransitions_ValidAlert_ReturnsTransitions() {
        // Given
        String alertId = "TEST_ALERT_123";
        AlertEntity mockEntity = AlertTestDataFactory.createTestAlertEntity();
        
        when(alertRepository.findAlertEntityByAlertId(alertId)).thenReturn(Optional.of(mockEntity));

        // When
        StepTransitionDTO result = alertService.getAlertStepTransitions(alertId);

        // Then
        assertThat(result).isNotNull();
        assertThat(result.getCurrentStep()).isNotNull();
        assertThat(result.getNextSteps()).isNotNull();
        assertThat(result.getBackSteps()).isNotNull();
        verify(alertRepository).findByAlertId(alertId);
    }

    @Test
    @DisplayName("Should handle error during alert creation")
    void createAlert_RepositoryError_ThrowsAlertOperationException() {
        // Given
        Alert inputAlert = AlertTestDataFactory.createTestAlert();
        when(alertRepository.createUpsertAlert(any(AlertEntity.class)))
                .thenThrow(new RuntimeException("Database error"));

        // When & Then
        assertThatThrownBy(() -> alertService.createAlert(inputAlert))
                .isInstanceOf(AlertOperationException.class)
                .hasMessageContaining("Alert operation failed");

        verify(alertRepository).createUpsertAlert(any(AlertEntity.class));
    }
}